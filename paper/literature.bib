@inproceedings{jsonSchema,
    author = {{P}ezoa, {F}elipe and {R}eutter, {J}uan {L}. and {S}uarez, {F}ernando and {U}garte, Mart\'{\i}n and {V}rgo\v{c}, {D}omagoj},
    title = {Foundations of {JSON} Schema},
    year = {2016},
    isbn = {9781450341431},
    publisher = {International World Wide Web Conferences Steering Committee},
    address = {Republic and Canton of Geneva, CHE},
    url = {https://doi.org/10.1145/2872427.2883029},
    doi = {10.1145/2872427.2883029},
    abstract = {JSON -- the most popular data format for sending API requests and responses -- is still lacking a standardized schema or meta-data definition that allows the developers to specify the structure of JSON documents. JSON Schema is an attempt to provide a general purpose schema language for JSON, but it is still work in progress, and the formal specification has not yet been agreed upon. Why this could be a problem becomes evident when examining the behaviour of numerous tools for validating JSON documents against this initial schema proposal: although they agree on most general cases, when presented with the greyer areas of the specification they tend to differ significantly. In this paper we provide the first formal definition of syntax and semantics for JSON Schema and use it to show that implementing this layer on top of JSON is feasible in practice. This is done both by analysing the theoretical aspects of the validation problem and by showing how to set up and validate a JSON Schema for Wikidata, the central storage for Wikimedia.},
    booktitle = {Proceedings of the 25th International Conference on World Wide Web},
    pages = {263–273},
    numpages = {11},
    keywords = {expressiveness of schema languages, JSON schema, JSON validation, JSON},
    location = {Montr\'{e}al, Qu\'{e}bec, Canada},
    series = {WWW '16}
}

@article{barbaglia,
    author = {Barbaglia, Guido and Murzilli, Simone and Cudini, Stefano},
    title = {Definition of {REST} web services with {JSON} schema},
    journal = {Software: Practice and Experience},
    volume = {47},
    number = {6},
    pages = {907-920},
    keywords = {JSON Schema, JSON Hyper Schema, REST, web services definition},
    doi = {https://doi.org/10.1002/spe.2466},
    url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.2466},
    eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/spe.2466},
    abstract = {Summary The Web has evolved from being a collection of documents to a collection of interconnected services that interoperate throughout the Internet. Web services are a natural consequence of this evolution. The web services model was initially centered around the eXtensible Markup Language (XML). Such services can be described by Web Services Description Language documents that are formally defined through the XML Schema Definition language. However, in recent years the popularity of XML-based web services has declined, as more developers favor JavaScript Object Notation (JSON)-based alternatives. Although the use of the latter language is spreading, no official standard to formally describe JSON documents exists. The aim of this article is to demonstrate how JSON Schema, and particularly the JSON Hyper Schema extension, is suitable to describe JSON-based web services that follow the REST architectural pattern. Copyright © 2016 John Wiley \& Sons, Ltd.},
    year = {2017}
}

@article{ChaeronySiffa2022,
  doi = {10.12688/f1000research.110875.1},
  url = {https://doi.org/10.12688/f1000research.110875.1},
  year = {2022},
  month = apr,
  publisher = {F1000 Research Ltd},
  volume = {11},
  pages = {475},
  author = {Ihda Chaerony Siffa and Jan Sch\"{a}fer and Markus M. Becker},
  title = {Adamant: a {JSON} schema-based metadata editor for research data management workflows},
  journal = {F1000Research}
}

@misc{jsonschemaJSONSchema,
	author = {},
	title = {{J}{S}{O}{N} {S}chema --- json-schema.org},
	howpublished = {\url{https://json-schema.org}},
	year = {},
	note = {[Accessed 01-05-2023]},
}

@misc{protobufProtocolBuffers,
	author = {},
	title = {{P}rotocol {B}uffers --- protobuf.dev},
	howpublished = {\url{https://protobuf.dev}},
	year = {},
	note = {[Accessed 01-05-2023]},
}

@inproceedings{graphQL,
    author = {Hartig, Olaf and Hidders, Jan},
    title = {Defining {S}chemas for {P}roperty {G}raphs by {U}sing the {G}raphQL {S}chema {D}efinition {L}anguage},
    year = {2019},
    isbn = {9781450367899},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3327964.3328495},
    doi = {10.1145/3327964.3328495},
    abstract = {GraphQL is a highly popular new approach to build Web APIs. An important component of this approach is the GraphQL schema definition language (SDL). The original purpose of this language is to define a so-called GraphQL schema that specifies the types of objects that can be queried when accessing a specific GraphQL Web API. This paper focuses on the question: Can we repurpose this language to define schemas for graph databases that are based on the Property Graph model? This question is relevant because there does not exist a commonly adopted approach to define schemas for Property Graphs, and because the form in which GraphQL APIs represent their underlying data sources is very similar to the Property Graph model. To answer the question we propose an approach to adopt the GraphQL SDL for Property Graph schemas. We define this approach formally and show its fundamental properties.},
    booktitle = {Proceedings of the 2nd Joint International Workshop on Graph Data Management Experiences \& Systems (GRADES) and Network Data Analytics (NDA)},
    articleno = {6},
    numpages = {11},
    keywords = {schema, constraints, graph database},
    location = {Amsterdam, Netherlands},
    series = {GRADES-NDA'19}
}

@misc{JSONValidation,
    title = {{JSON} {S}chema {V}alidation: {A} {V}ocabulary for {S}tructural {V}alidation of {JSON}},
    url = {https://json-schema.org/draft/2019-09/json-schema-validation.html},
    author = {A. Wright, H. Andrews, B. Hutton},
    year = {March 20, 2020},
    note = {[Accessed 06-05-2023]}
}

@misc{bossshoppro,
    title={Bossshoppro - the most powerful chest {G}{U}{I} shop/menu plugin.},
    url={https://www.spigotmc.org/resources/bossshoppro-the-most-powerful-chest-gui-shop-menu-plugin.222/},
    journal={Spigot},
    author={Neubauer, Felix}}

@book{marrs2017json,
    title={{JSON} at work: practical data integration for the web},
    author={Marrs, Tom},
    year={2017},
    publisher={" O'Reilly Media, Inc."},
    pages={269-286}
}

@article{xml_schemas_1,
    author = {Lee, Dongwon and Chu, Wesley W.},
    title = {{C}omparative{ A}nalysis of {S}ix {XML} {S}chema {L}anguages},
    year = {2000},
    issue_date = {Sept. 2000},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {29},
    number = {3},
    issn = {0163-5808},
    url = {https://doi.org/10.1145/362084.362140},
    doi = {10.1145/362084.362140},
    abstract = {As XML [5] is emerging as the data format of the internet era, there is an substantial increase of the amount of data in XML format. To better describe such XML data structures and constraints, several XML schema languages have been proposed. In this paper, we present a comparative analysis of six noteworthy XML schema languages.},
    journal = {SIGMOD Rec.},
    month = {sep},
    pages = {76–87},
    numpages = {12}
}

@article{xml_schemas_2,
    author = {Martens, Wim and Neven, Frank and Niewerth, Matthias and Schwentick, Thomas},
    title = {BonXai: {C}ombining the {S}implicity of {DTD} with the {E}xpressiveness of {XML} Schema},
    year = {2017},
    issue_date = {September 2017},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {42},
    number = {3},
    issn = {0362-5915},
    url = {https://doi.org/10.1145/3105960},
    doi = {10.1145/3105960},
    abstract = {While the migration from DTD to XML Schema was driven by a need for increased expressivity and flexibility, the latter was also significantly more complex to use and understand. Whereas DTDs are characterized by their simplicity, XML Schema Documents are notoriously difficult. In this article, we introduce the XML specification language BonXai, which incorporates many features of XML Schema but is arguably almost as easy to use as DTDs. In brief, the latter is achieved by sacrificing the explicit use of types in favor of simple patterns expressing contexts for elements. The goal of BonXai is not to replace XML Schema but rather to provide a simpler alternative for users who want to go beyond the expressiveness and features of DTD but do not need the explicit use of types. Furthermore, XML Schema processing tools can be used as a back-end for BonXai, since BonXai can be automatically converted into XML Schema. A particularly strong point of BonXai is its solid foundation rooted in a decade of theoretical work around pattern-based schemas. We present a formal model for a core fragment of BonXai and the translation algorithms to and from a core fragment of XML Schema. We prove that BonXai and XML Schema can be converted back-and-forth on the level of tree languages and we formally study the size trade-offs between the two languages.},
    journal = {ACM Trans. Database Syst.},
    month = {aug},
    articleno = {15},
    numpages = {42},
    keywords = {XML, schema languages, XML Schema, BonXai}
}

@inproceedings{dtd_vs_xsd,
    author = {Bex, Geert Jan and Neven, Frank and Van den Bussche, Jan},
    title = {{DTD}s versus {XML} Schema: {A} {P}ractical {S}tudy},
    year = {2004},
    isbn = {9781450377881},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/1017074.1017095},
    doi = {10.1145/1017074.1017095},
    abstract = {Among the various proposals answering the shortcomings of Document Type Definitions (DTDs), XML Schema is the most widely used. Although DTDs and XML Schema Definitions (XSDs) differ syntactically, they are still quite related on an abstract level. Indeed, freed from all syntactic sugar, XML Schemas can be seen as an extension of DTDs with a restricted form of specialization. In the present paper, we inspect a number of DTDs and XSDs harvested from the web and try to answer the following questions: (1) which of the extra features/expressiveness of XML Schema not allowed by DTDs are effectively used in practice; and, (2) how sophisticated are the structural properties (i.e. the nature of regular expressions) of the two formalisms. It turns out that at present real-world XSDs only sparingly use the new features introduced by XML Schema: on a structural level the vast majority of them can already be defined by DTDs. Further, we introduce a class of simple regular expressions and obtain that a surprisingly high fraction of the content models belong to this class. The latter result sheds light on the justification of simplifying assumptions that sometimes have to be made in XML research.},
    booktitle = {Proceedings of the 7th International Workshop on the Web and Databases: Colocated with ACM SIGMOD/PODS 2004},
    pages = {79–84},
    numpages = {6},
    location = {Paris, France},
    series = {WebDB '04}
}

@misc{xsd_spec,
    title={{XML} {S}chema {P}art 0: {P}rimer {S}econd {E}dition - {W3C} {R}ecommendation 28 {O}ctober 2004},
    url={https://www.w3.org/TR/2004/REC-xmlschema-0-20041028/},
    journal={W3C},
    author={Fallside, David and Walmsley, Priscilla},
    year={2004}}

@misc{dtd_spec,
    title={{W3C} {XML} {S}pecification {DTD} (“{XML}spec”)},
    url={https://www.w3.org/XML/1998/06/xmlspec-report-19980910.htm},
    journal={W3C},
    author={Bosak, Jon and Bray, Tim and Connolly, Dan and Maler, Eve and Nicol, Gabin and Sperberg-McQueen, Michael and Wood, Lauren and Clark, James},
    year={1998}}

@misc{JSON_schema_vailidation,
    title = {{V}alidation},
    url = {https://json-schema.org/draft/2020-12/json-schema-validation.html#name-validation-keywords-for-any},
    author = {A.Wright, H.Andrews Ed, B Hutton},
    year = {18 December 2022},
    note = {[Accessed 18-05-2023]}
}

@misc{mostpopularides,
	author = {Pierre Carbonnelle},
	title = {{T}{O}{P} {I}{D}{E} {T}op {I}ntegrated {D}evelopment {E}nvironment index --- pypl.github.io},
	howpublished = {\url{https://pypl.github.io/IDE.html}},
	year = {},
	note = {[Accessed 18-05-2023]},
}

@article{siffa2022adamant,
    title={Adamant: a {JSON} schema-based metadata editor for research data management workflows},
    author={Siffa, Ihda Chaerony and Sch{\"a}fer, Jan and Becker, Markus M},
    journal={F1000Research},
    volume={11},
    year={2022},
    publisher={Faculty of 1000 Ltd}
}

@misc{cuelang,
    title = {{C}onfigure {U}nify {E}xecute},
    url = {https://cuelang.org/},
    year = {2019},
    note = {[Accessed 18-05-2023]}
}

@misc{baazizi2021empirical,
    title={{A}n {E}mpirical {St}udy on the "{U}sage of {N}ot" in {R}eal-{W}orld {JSON} {S}chema {D}ocuments ({L}ong {V}ersion)},
    author={Mohamed-Amine Baazizi and Dario Colazzo and Giorgio Ghelli and Carlo Sartiani and Stefanie Scherzinger},
    year={2021},
    eprint={2107.08677},
    archivePrefix={arXiv},
    primaryClass={cs.DB}
}

@misc{Apache-Avro,
    title = {{L}eading {S}erialization {F}ormat for {R}ecord {D}ata},
    url = {https://www.ibm.com/topics/avro},
    year = {},
    note = {[Accessed 14-06-2023]}
}

@misc{ace-editor,
    title = {{C}ode {E}ditor},
    url = {https://ace.c9.io/},
    author={Harutyun Amirjanyan, Fabian Jakobs},
    year = {Mar 28, 2010},
    note={[Accessed 14-05-2023]}
}

@misc{ajv-validator,
    title={A useful library for validating a {JSON} file based on the schema},
    url={https://ajv.js.org/},
    author={Evgeny Poberezkin etc.},
    year={May 17, 2015}
}

@misc{baeldung_2023,
    title={Validate an {XML} file against an {XSD} file},
    url={https://www.baeldung.com/java-validate-xml-xsd},
    journal={Baeldung}, author={baeldung},
    year={2023},
    month={Sep}}

@misc{rfc8927,
    series =    {Request for Comments},
    number =    8927,
    howpublished =  {RFC 8927},
    publisher = {RFC Editor},
    doi =       {10.17487/RFC8927},
    url =       {https://www.rfc-editor.org/info/rfc8927},
    author =    {Ulysse Carion},
    title =     {{JSON} {T}ype {D}efinition},
    pagetotal = 51,
    year =      2020,
    month =     nov,
    abstract =  {This document proposes a format, called JSON Type Definition (JTD), for describing the shape of JavaScript Object Notation (JSON) messages. Its main goals are to enable code generation from schemas as well as portable validation with standardized error indicators. To this end, JTD is intentionally limited to be no more expressive than the type systems of mainstream programming languages. This intentional limitation, as well as the decision to make JTD schemas be JSON documents, makes tooling atop of JTD easier to build. This document does not have IETF consensus and is presented here to facilitate experimentation with the concept of JTD.},
}

@misc{Kappestein_2023,
    title={{T}ypeschema},
    url={https://typeschema.org/},
    journal={TypeSchema},
    author={Kappestein, Christoph},
    year={2023}}

@misc{schemastoreJSONSchema,
    author = {Mads Kristensen},
    title = {{J}{S}{O}{N} {S}chema {S}tore --- schemastore.org},
    howpublished = {\url{https://www.schemastore.org/json/}},
    year = {},
    note = {[Accessed 07-10-2023]},
}

@Inbook{Frasincar2006,
    author="Frasincar, Flavius
and Telea, Alexandru
and Houben, Geert-Jan",
    editor="Geroimenko, Vladimir
and Chen, Chaomei",
    title={{A}dapting {G}raph {V}isualization {T}echniques for the {V}isualization of {RDF} {D}ata},
    bookTitle={Visualizing the Semantic Web: XML-Based Internet and Information Visualization},
    year={2006},
    publisher="Springer London",
    address="London",
    pages="154--171",
    isbn="978-1-84628-290-4",
    doi="10.1007/1-84628-290-X_9",
    url="https://doi.org/10.1007/1-84628-290-X_9"
}
@article{SILVA201928,
    title = {Visualization and analysis of schema and instances of ontologies for improving user tasks and knowledge discovery},
    journal = {Journal of Computer Languages},
    volume = {51},
    pages = {28-47},
    year = {2019},
    issn = {2590-1184},
    doi = {https://doi.org/10.1016/j.cola.2019.01.004},
    url = {https://www.sciencedirect.com/science/article/pii/S1045926X17302458},
    author = {Isabel Cristina Siqueira Silva and Giuseppe Santucci and Carla Maria Dal Sasso Freitas},
    keywords = {Ontology, Information visualization, Data visualization, Visual analytics, Interaction},
    abstract = {Ontologies are an important resource for knowledge representation. Their structure can be complex due to role relations between several concepts, distinct attributes, and different instances. In this paper, we discuss a Visual Analytics solution, relying on the use of multiple coordinated views for exploring different ontology aspects and a novel use of the degree of interest (DoI) suppression technique to reduce the complexity of the ontology visual representation. Visual Analytics facilitates the understanding of the domain and tasks represented by ontologies, thus allowing to carry out exploratory analysis to optimize the comprehension of data semantics including non-explicit relationships between data. Through the DoI technique, we place the main concept in focus, distinguishing it from the unnecessary information and facilitating the analysis and understanding of correlated data. We evaluated all the devised solutions, and the results reinforce the importance of providing visualization and analysis techniques dedicated to the schema and instances levels of ontologies for the discovery of non-explicit information.}
}

@inproceedings{10.1145/1317353.1317362,
    author = {Deligiannidis, Leonidas and Kochut, Krys J. and Sheth, Amit P.},
    title = {{RDF} {D}ata {E}xploration and {V}isualization},
    year = {2007},
    isbn = {9781595938312},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/1317353.1317362},
    doi = {10.1145/1317353.1317362},
    abstract = {We present Paged Graph Visualization (PGV), a new semi-autonomous tool for RDF data exploration and visualization. PGV consists of two main components: a) the "PGV explorer" and b) the "RDF pager" module utilizing BRAHMS, our high per-formance main-memory RDF storage system. Unlike existing graph visualization techniques which attempt to display the entire graph and then filter out irrelevant data, PGV begins with a small graph and provides the tools to incrementally explore and visualize relevant data of very large RDF ontologies. We implemented several techniques to visualize and explore hot spots in the graph, i.e. nodes with large numbers of immediate neighbors. In response to the user-controlled, semantics-driven direction of the exploration, the PGV explorer obtains the necessary sub-graphs from the RDF pager and enables their incremental visualization leaving the previously laid out sub-graphs intact. We outline the problem of visualizing large RDF data sets, discuss our interface and its implementation, and through a controlled experiment we show the benefits of PGV.},
    booktitle = {Proceedings of the ACM First Workshop on CyberInfrastructure: Information Management in EScience},
    pages = {39–46},
    numpages = {8},
    keywords = {incremental data exploration, ontology visualization},
    location = {Lisbon, Portugal},
    series = {CIMS '07}
}

@INPROCEEDINGS{1173142,
    author={North, C. and Conklin, N. and Saini, V.},
    booktitle={{IEEE} Symposium on Information Visualization, 2002. INFOVIS 2002.},
    title={{V}isualization schemas for flexible information visualization},
    year={2002},
    volume={},
    number={},
    pages={15-22},
    doi={10.1109/INFVIS.2002.1173142}}

@misc{jsoneditoronlineJSONEditor,
    author = {Jos de Jong},
    title = {{J}{S}{O}{N} {E}ditor {O}nline: {J}{S}{O}{N} editor, {J}{S}{O}{N} formatter, query {J}{S}{O}{N} --- jsoneditoronline.org},
    howpublished = {\url{https://jsoneditoronline.org}},
    year = {},
    note = {[Accessed 08-10-2023]},
}

@misc{xmlblueprintEditorXMLBlueprint,
    author = {},
    title = {{X}{M}{L} {E}ditor - {X}{M}{L}{B}lueprint --- xmlblueprint.com},
    howpublished = {\url{https://www.xmlblueprint.com}},
    year = {},
    note = {[Accessed 08-10-2023]},
}
@misc{oxygenxmlCompleteSolution,
    author = {},
    title = {{T}he complete solution for {X}{M}{L} authoring, development and collaboration. --- oxygenxml.com},
    howpublished = {\url{https://www.oxygenxml.com/xml_developer.html}},
    year = {},
    note = {[Accessed 08-10-2023]},
}

@misc{altovaEditorXMLSpy,
    author = {},
    title = {{X}{M}{L} {E}ditor: {X}{M}{L}{S}py --- altova.com},
    howpublished = {\url{https://www.altova.com/xmlspy-xml-editor}},
    year = {},
    note = {[Accessed 08-10-2023]},
}
@misc{liquidtechnologiesJSONSchema,
    author = {Liquid Technologies Limited},
    title = {{J}{S}{O}{N} {S}chema {E}ditor --- liquid-technologies.com},
    howpublished = {\url{https://www.liquid-technologies.com/json-schema-editor}},
    year = {},
    note = {[Accessed 08-10-2023]},
}
@misc{jsonbuddyJSONSchema,
    author = {},
    title = {{J}{S}{O}{N} {S}chema editor for {W}indows --- json-buddy.com},
    howpublished = {\url{https://www.json-buddy.com/json-schema-editor.htm}},
    year = {},
    note = {[Accessed 08-10-2023]},
}
@misc{xmlbuddyEditorValidator,
    author = {},
    title = {{X}{M}{L} editor and validator tool --- xml-buddy.com},
    howpublished = {\url{https://www.xml-buddy.com}},
    year = {},
    note = {[Accessed 08-10-2023]},
}

@misc{jsonformsMoreForms,
    author = {Müller, E. and Neufeld, E. and Dirix, S. and Koehler, L. and Gareis, F.},
    title = {{M}ore forms. {L}ess code. - {J}{S}{O}{N} {F}orms --- jsonforms.io},
    howpublished = {\url{https://jsonforms.io}},
    year = {2021},
    note = {[Accessed 08-10-2023]},
}

@misc{githubGitHubJsonformjsonform,
    author = {Zimmer, S. and Chapellier, C. and Daoust, F.},
    title = {{G}it{H}ub - jsonform/jsonform: {B}uild forms from {J}{S}{O}{N} {S}chema. {E}asily template-able. {C}ompatible with {B}ootstrap 3 out of the box. --- github.com},
    howpublished = {\url{https://github.com/jsonform/jsonform}},
    year = {2021},
    note = {[Accessed 08-10-2023]},
}

@misc{githubGitHubJsonschemaformangularschemaform,
    author = {Jensen, D. and Bennett, M. J. and Dervisevic, D. and Edwards, C. and Marcacci, M.},
    title = {{G}it{H}ub - json-schema-form/angular-schema-form: {G}enerate forms from a {J}{S}{O}{N} schema, with {A}ngular{J}{S}! --- github.com},
    howpublished = {\url{https://github.com/json-schema-form/angular-schema-form}},
    year = {2016},
    note = {[Accessed 08-10-2023]},
}

@misc{githubGitHubRjsfteamreactjsonschemaform,
    author = {Perriault, N. and Ramaswami, A. and Grosenbacher, N.},
    title = {{G}it{H}ub - rjsf-team/react-jsonschema-form: {A} {R}eact component for building {W}eb forms from {J}{S}{O}{N} {S}chema. --- github.com},
    howpublished = {\url{https://github.com/rjsf-team/react-jsonschema-form}},
    year = {2023},
    note = {[Accessed 08-10-2023]},
}
@misc{githubBspEditor,
    author = {Neubauer, F.},
    title = {{G}it{H}ub - {L}ogende/{B}ossShopProEditor:  powerful and user-friendly web application, which makes setting up shops for the Bukkit plugin {B}oss{S}hop{P}ro way easier. --- github.com},
    howpublished = {\url{https://github.com/Logende/BossShopProEditor}},
    year = {2023},
    note = {[Accessed 11-10-2023]},
}

@misc{githubGitHubVuegeneratorsvueformgenerator,
    author = {Higgins, D. and Icebob},
    title = {{G}it{H}ub - vue-generators/vue-form-generator: :clipboard: {A} schema-based form generator component for {V}ue.js --- github.com},
    howpublished = {\url{https://github.com/vue-generators/vue-form-generator}},
    year = {2019},
    note = {[Accessed 08-10-2023]},
}

@misc{vuejsVuejsProgressive,
    author = {You, Evan},
    title = {{V}ue.js - {T}he {P}rogressive {J}ava{S}cript {F}ramework | {V}ue.js --- vuejs.org},
    howpublished = {\url{https://vuejs.org}},
    year = {2023},
    note = {[Accessed 18-10-2023]},
}

@misc{primevuePrimeVueComponent,
    author = {Küçükoğlu, Tuğçe},
    title = {{P}rime{V}ue | {V}ue {U}{I} {C}omponent {L}ibrary --- primevue.org},
    howpublished = {\url{https://primevue.org}},
    year = {2023},
    note = {[Accessed 18-10-2023]},
}

@misc{githubGitHubMokkabonnajsonschemamergeallof,
    author = {Hansen, Martin},
    title = {{G}it{H}ub - mokkabonna/json-schema-merge-allof: {S}implify your schema by combining all{O}f --- github.com},
    howpublished = {\url{https://github.com/mokkabonna/json-schema-merge-allof}},
    year = {2023},
    note = {[Accessed 18-10-2023]},
}

@misc{pyenzyme,
    author = {Range, Jan},
    title = {{G}it{H}ub - {L}ightweight syntax for rapid development of data management solution in enzymology and biocatalysis.},
    url = {https://github.com/EnzymeML/PyEnzyme},
    year = {2020},
    note = {[Accessed 19-10-2023]},
}

@misc{strenda,
    author = {Range, Jan},
    title = {{G}it{H}ub - {S}tandards for {R}eporting {E}nzymology {D}ata.},
    url = {https://github.com/EnzymeML/strenda-specifications/blob/master/specifications/strenda-specs.md},
    year = {2023},
    note = {[Accessed 19-10-2023]},
}
